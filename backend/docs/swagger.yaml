basePath: /api
definitions:
  handlers.AppointmentReq:
    properties:
      master_id:
        type: integer
      time:
        type: string
    type: object
  handlers.AppointmentRes:
    properties:
      id:
        type: integer
    type: object
  handlers.CreateReviewReq:
    properties:
      comment:
        type: string
      master_id:
        type: integer
      rating:
        type: integer
    type: object
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.LoginReq:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  handlers.LoginRes:
    properties:
      token:
        type: string
    type: object
  handlers.RegisterReq:
    properties:
      code:
        type: string
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      specialization:
        type: string
      username:
        type: string
    type: object
  handlers.RegisterRes:
    properties:
      id:
        type: integer
    type: object
  handlers.RestoreReq:
    properties:
      code:
        type: string
      email:
        type: string
      password:
        type: string
    type: object
  handlers.SendVerificationCodeReq:
    properties:
      email:
        type: string
    type: object
  handlers.SetWorkingSlotsReq:
    properties:
      date:
        type: string
      slots:
        items:
          type: string
        type: array
    required:
    - date
    - slots
    type: object
  handlers.UpdateReq:
    properties:
      bio:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      specialization:
        type: string
      username:
        type: string
    type: object
  handlers.setDayOffInput:
    properties:
      date:
        type: string
      is_day_off:
        type: boolean
    required:
    - date
    type: object
  handlers.setWorkingSlotsInput:
    properties:
      day_of_week:
        type: string
      slots:
        items:
          type: string
        minItems: 1
        type: array
    required:
    - day_of_week
    - slots
    type: object
  models.Appointment:
    properties:
      created_at:
        type: string
      id:
        type: integer
      master_id:
        type: integer
      scheduled_at:
        type: string
      status:
        type: string
      user_id:
        type: integer
    type: object
  models.Review:
    properties:
      comment:
        type: string
      created_at:
        type: string
      id:
        type: integer
      master_id:
        type: integer
      rating:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.TodaySchedule:
    properties:
      appointments:
        items:
          type: string
        type: array
      days_off:
        items:
          type: string
        type: array
      slots:
        items:
          type: string
        type: array
    type: object
  models.User:
    properties:
      average_rating:
        type: number
      bio:
        type: string
      full_name:
        type: string
      id:
        type: integer
      registered_at:
        type: string
      specialization:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  description: Appointment booking system
  title: Strawberry API
  version: "1.0"
paths:
  /appointments:
    get:
      consumes:
      - application/json
      description: Get appointments filtered by date and/or status
      parameters:
      - description: Filter by date in format YYYY-MM-DD
        in: query
        name: date
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Appointment'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get appointments for the authenticated user
      tags:
      - appointments
    post:
      consumes:
      - application/json
      description: Create a new appointment for the authenticated user
      parameters:
      - description: appointment info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.AppointmentReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.AppointmentRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new appointment
      tags:
      - appointments
  /appointments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an appointment by ID if it belongs to the user
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an appointment
      tags:
      - appointments
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return a JWT token
      parameters:
      - description: login credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /masters:
    get:
      consumes:
      - application/json
      description: Get masters filtered by specialization and/or minimum average rating
      parameters:
      - description: Filter by specialization
        in: query
        name: specialization
        type: string
      - description: Filter by minimum average rating
        in: query
        name: min_rating
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get list of masters
      tags:
      - masters
  /masters/{username}:
    get:
      consumes:
      - application/json
      description: Fetch a master's profile using their username
      parameters:
      - description: Master's username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get master by username
      tags:
      - masters
  /masters/appointments:
    get:
      description: Returns all appointments for the currently authenticated master
      produces:
      - application/json
      responses:
        "200":
          description: List of appointments
          schema:
            items:
              $ref: '#/definitions/models.Appointment'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get master's appointments
      tags:
      - appointments
  /masters/works/{id}:
    delete:
      description: Deletes a work slot belonging to the authenticated master
      parameters:
      - description: Work ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete master work slot
      tags:
      - master
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user or master account
      parameters:
      - description: registration data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.RegisterRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register a new user or master
      tags:
      - auth
  /restore:
    post:
      consumes:
      - application/json
      description: Verifies a code and sets a new password for the user
      parameters:
      - description: Restore request payload
        in: body
        name: restore
        required: true
        schema:
          $ref: '#/definitions/handlers.RestoreReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid data or validation error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Invalid code
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Restore password
      tags:
      - auth
  /reviews:
    post:
      consumes:
      - application/json
      parameters:
      - description: Данные отзыва
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateReviewReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Review'
        "400":
          description: Неверные данные запроса
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Неавторизован
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создать отзыв
      tags:
      - reviews
  /reviews/{id}:
    delete:
      description: Удаляет отзыв пользователя по ID
      parameters:
      - description: ID отзыва
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Отзыв удалён
        "400":
          description: Неверный ID отзыва
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Неавторизован
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Отзыв не найден
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удалить отзыв
      tags:
      - reviews
    put:
      consumes:
      - application/json
      description: Обновляет существующий отзыв пользователя
      parameters:
      - description: ID отзыва
        in: path
        name: id
        required: true
        type: integer
      - description: Данные отзыва
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/models.Review'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Review'
        "400":
          description: Неверные данные или ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Неавторизован
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Отзыв не найден
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновить отзыв
      tags:
      - reviews
  /reviews/master/{master_id}:
    get:
      parameters:
      - description: ID мастера
        in: path
        name: master_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Review'
            type: array
        "400":
          description: Неверный ID мастера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Получить отзывы мастера
      tags:
      - reviews
  /schedule/{id}:
    get:
      description: Get working schedule slots for the current user for today
      parameters:
      - description: date
        in: query
        name: date
        required: true
        type: string
      - description: user's id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Today's schedule
          schema:
            $ref: '#/definitions/models.TodaySchedule'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get today's schedule
      tags:
      - schedule
  /schedule/dayoff:
    put:
      consumes:
      - application/json
      description: Mark/unmark a day of week as day off
      parameters:
      - description: Day off input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.setDayOffInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Set day off for master
      tags:
      - schedule
  /schedule/hours/date:
    delete:
      description: Delete all working slots for a given date (master only).
      parameters:
      - description: Date in YYYY-MM-DD format
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Missing or invalid date
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete working slots
      tags:
      - schedule
    put:
      consumes:
      - application/json
      description: Set available time slots for a given date (master only).
      parameters:
      - description: working slots info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.SetWorkingSlotsReq'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Invalid input or bad date
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Set working slots
      tags:
      - schedule
  /schedule/hours/weekday:
    put:
      consumes:
      - application/json
      description: Update exact time slots for a day of week
      parameters:
      - description: Working slots input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.setWorkingSlotsInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Set working slots for master
      tags:
      - schedule
  /search:
    get:
      consumes:
      - application/json
      description: Search Master by full_name, username or specialization
      parameters:
      - description: Search query (searching for full_name, username, specialization)
        in: query
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Search Masters
      tags:
      - users
  /send-code:
    post:
      consumes:
      - application/json
      description: Sends a verification code to the provided email address
      parameters:
      - description: Email input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.SendVerificationCodeReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid email format
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Could not send code
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Send verification code
      tags:
      - auth
  /users:
    put:
      consumes:
      - application/json
      description: Update User's data such as username , bio,  full_name, specialization
        and email
      parameters:
      - description: update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateReq'
      responses:
        "200":
          description: Апдейт
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - auth
  /users/{id}/avatar:
    get:
      description: Returns the avatar image file for the given user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - image/jpeg
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: invalid id
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: something went wrong
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get user's avatar
      tags:
      - avatar
  /users/{id}/works:
    get:
      description: Returns list of work IDs uploaded by the master
      parameters:
      - description: Master ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get master work IDs
      tags:
      - master
  /users/{id}/works/{workId}:
    get:
      description: Returns a specific work file uploaded by the master
      parameters:
      - description: Master ID
        in: path
        name: id
        required: true
        type: integer
      - description: Work ID
        in: path
        name: workId
        required: true
        type: string
      produces:
      - image/png
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get master work file
      tags:
      - master
  /users/avatar:
    post:
      consumes:
      - multipart/form-data
      description: Uploads and stores the avatar image for the authorized user
      parameters:
      - description: Avatar file
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: can't find or open file
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: can't upload file to our server
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload user's avatar
      tags:
      - avatar
  /users/works:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a file (e.g. image) representing master's work
      parameters:
      - description: Work file
        in: formData
        name: work
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload master's work
      tags:
      - master
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
