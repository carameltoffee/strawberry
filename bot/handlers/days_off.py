from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from api.api_client import StrawberryAPIClient
from states.states import States
from logic.logic import parse_dates
from db.db import store

def create_days_off_router(api_client: StrawberryAPIClient) -> Router:
    router = Router()

    @router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π")
    async def cmd_add_day_off(message: Message, state: FSMContext):
        await message.answer("üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–Ω–∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö (–ì–ì–ì–ì-–ú–ú-–î–î —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
        await state.set_state(States.choose_weekend_days)

    @router.message(States.choose_weekend_days)
    async def process_add_day_off(message: Message, state: FSMContext):
        user_id = message.from_user.id
        token = store.get_user_token(user_id)
        if not token:
            await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /login.")
            return

        valid, invalid = parse_dates(message.text)
        if invalid:
            await message.answer(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {', '.join(invalid)}")
            return

        success_dates = []
        for date in valid:
            ok = await api_client.set_day_off(date.strftime("%A"), True, token)
            if ok:
                success_dates.append(str(date))

        if success_dates:
            await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –≤—ã—Ö–æ–¥–Ω—ã–µ:\n" + "\n".join(success_dates))
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ.")

        await state.clear()

    return router
