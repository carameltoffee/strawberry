from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from api.api_client import StrawberryAPIClient
from states.states import States
from utils.utils import parse_times, parse_date
from db.db import store

def create_work_hours_router(api_client: StrawberryAPIClient) -> Router:
    router = Router()

    @router.message(F.text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã –ø—Ä–∏—ë–º–∞ –Ω–∞ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏")
    async def cmd_set_work_hours(message: Message, state: FSMContext):
        await message.answer("üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ —á–∞—Å—ã –ø—Ä–∏—ë–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00 14:30 16:00):")
        await state.set_state(States.set_work_hours)

    @router.message(States.set_work_hours)
    async def process_set_work_hours(message: Message, state: FSMContext):
        user_id = message.from_user.id
        token = store.get_user_token(user_id)

        if not token:
            await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /login.")
            return

        parts = message.text.strip().split()
        if len(parts) < 2:
            await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –≤—Ä–µ–º—è.")
            return

        weekday_rus = parts[0].lower()
        weekdays_map = {
            "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "monday", "–≤—Ç–æ—Ä–Ω–∏–∫": "tuesday", "—Å—Ä–µ–¥–∞": "wednesday",
            "—á–µ—Ç–≤–µ—Ä–≥": "thursday", "–ø—è—Ç–Ω–∏—Ü–∞": "friday", "—Å—É–±–±–æ—Ç–∞": "saturday", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "sunday"
        }
        weekday_eng = weekdays_map.get(weekday_rus)
        if not weekday_eng:
            await message.answer(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {weekday_rus}")
            return

        times = parts[1:]
        valid, invalid = parse_times(" ".join(times))
        if invalid:
            await message.answer(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {', '.join(invalid)}")
            return

        if not valid:
            await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.")
            return

        slots = sorted(t.strftime("%H:%M") for t in valid)

        ok = await api_client.set_working_slots_by_weekday(weekday_eng, slots, token)
        await message.answer(
            f"‚úÖ –ß–∞—Å—ã –ø—Ä–∏—ë–º–∞ –Ω–∞ {weekday_rus} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n" + "\n".join(slots)
            if ok else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã –ø—Ä–∏—ë–º–∞."
        )
        await state.clear()

    @router.message(F.text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã –ø—Ä–∏—ë–º–∞ –Ω–∞ –¥–∞—Ç—É")
    async def cmd_set_work_hours_by_date(message: Message, state: FSMContext):
        await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ —á–∞—Å—ã –ø—Ä–∏—ë–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-12-25 10:00 14:30 16:00):")
        await state.set_state(States.set_work_hours_by_date)

    @router.message(States.set_work_hours_by_date)
    async def process_set_work_hours_by_date(message: Message, state: FSMContext):
        user_id = message.from_user.id
        token = store.get_user_token(user_id)

        if not token:
            await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /login.")
            return

        parts = message.text.strip().split()
        if len(parts) < 2:
            await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –≤—Ä–µ–º—è.")
            return

        date_str = parts[0]
        try:
            parse_date(date_str)  
        except ValueError:
            await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD.")
            return

        times = parts[1:]
        valid, invalid = parse_times(" ".join(times))
        if invalid:
            await message.answer(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {', '.join(invalid)}")
            return

        slots = sorted(t.strftime("%H:%M") for t in valid)
        ok = await api_client.set_working_slots_by_date(date=date_str, slots=slots, token=token)

        await message.answer(
            f"‚úÖ –ß–∞—Å—ã –ø—Ä–∏—ë–º–∞ –Ω–∞ {date_str} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n" + "\n".join(slots)
            if ok else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã –ø—Ä–∏—ë–º–∞."
        )
        await state.clear()

    @router.message(F.text == "–£–¥–∞–ª–∏—Ç—å —á–∞—Å—ã –ø—Ä–∏—ë–º–∞ –Ω–∞ –¥–∞—Ç—É")
    async def cmd_delete_work_hours_by_date(message: Message, state: FSMContext):
        await message.answer("üóë –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —á–∞—Å—ã –ø—Ä–∏—ë–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-12-25):")
        await state.set_state(States.delete_work_hours_by_date)

    @router.message(States.delete_work_hours_by_date)
    async def process_delete_work_hours_by_date(message: Message, state: FSMContext):
        user_id = message.from_user.id
        token = store.get_user_token(user_id)
    
    return router
